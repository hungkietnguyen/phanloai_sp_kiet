import cv2
import serial
import numpy as np

ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
ser.reset_input_buffer()

# Define the shapes to be recognized
shapes = {
    3: "triangle",
    4: "rectangle",
    5: "pentagon"
}

# Define the color and line thickness of the focus box
focus_box_color = (0, 255, 0)
focus_box_thickness = 2

# Keep track of detected shapes
detected_shapes = []

# Load the USB camera
cap = cv2.VideoCapture(0)

# Define the minimum contour area threshold
min_area_threshold = 1000

while True:
    # Capture frame from camera
    ret, frame = cap.read()

    # Convert frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise and remove small details
    blurred = cv2.GaussianBlur(gray, (15, 15), 0)

    # Detect edges using Canny edge detection
    edges = cv2.Canny(blurred, 50, 150)

    # Apply LSD algorithm to detect straight lines in the image
    lsd = cv2.createLineSegmentDetector(0)
    lines, _, _, _ = lsd.detect(edges)

    # Find the number of vertices in each line segment and append to a list
    vertices_list = []
    for line in lines:
        x1, y1, x2, y2 = line.flatten()
        vertices_list.append((x1, y1))
        vertices_list.append((x2, y2))

    # Use the vertices list to approximate the polygonal shape
    if len(vertices_list) > 0:
        hull = cv2.convexHull(np.array(vertices_list))
        approx = cv2.approxPolyDP(hull, 0.02 * cv2.arcLength(hull, True), True)

        # Check if the approximated polygon has three, four, or five sides and above the minimum area threshold
        if len(approx) in shapes and cv2.contourArea(approx) > min_area_threshold:
            # Draw focus box around the detected shape
            x, y, w, h = cv2.boundingRect(approx)
            cv2.rectangle(frame, (x, y), (x + w, y + h), focus_box_color, focus_box_thickness)

            # Print the recognized shape to the shell
            shape = shapes[len(approx)]
            print(shape)

            # Add detected shape to list
            detected_shapes.append(shape)

    # Check if we have enough detected shapes to send a value to the serial port
    if len(detected_shapes) == 10:
        # Get the most frequent detected shape
        most_common_shape = max(set(detected_shapes), key=detected_shapes.count)
        print(f"Most common shape: {most_common_shape}")

        # Send shape recognition result to the serial port
        if most_common_shape == "triangle":
            ser.write(b"triangle\n")
        elif most_common_shape == "rectangle":
            ser.write(b"rectangle\n")
        elif most_common_shape == "pentagon":
            ser.write(b"pentagon\n")

        # Reset detected shapes list
        detected_shapes = []

    # Display the captured frame with focus box
    cv2.imshow('frame', frame)

    # Press 'q' to quit the program
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv2.destroyAllWindows()
ser.close()